{"version":3,"sources":["components/board.module.css","hooks/interval.ts","hooks/score.ts","hooks/tetrominos.ts","utils/classnames.ts","utils/range.ts","components/board.tsx","hooks/keyboard.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useInterval","callback","delay","cb","useRef","useEffect","current","id","setInterval","clearInterval","rates","Math","floor","points","useScore","useState","lines","setLines","score","setScore","level","setLevel","rate","setRate","updateScore","useCallback","n","nlines","nlevel","nrate","prev","TetrisState","tetrominos","shapes","I","J","L","O","S","T","Z","positions","x","y","getInitBoard","width","height","Array","fill","map","line","getRandomTetromino","random","length","getTetrominoShape","t","rotation","isInShape","shape","posX","posY","isShapeCollidingWithBoard","board","some","j","value","i","undefined","merge","l","clearLines","clearedBoard","filter","cleared","splice","cn","names","join","range","start","end","from","_","TetrominoStyles","Cell","React","memo","className","style","square","internSquare","Board","props","paused","state","setState","setBoard","currentTetromino","setCurrent","nextTetromino","setNext","setX","setY","setRotation","checkY","setCheckY","togglePause","gameover","running","reset","next","rotate","rotatedShape","left","right","down","saveboard","useTetris","nextShape","useMemo","currentShape","codes","options","keydown","keyup","downHandler","event","includes","code","upHandler","window","addEventListener","removeEventListener","useKeyBoard","preventDefault","commands","descriptions","instructions","game","key","blockLine","color","scores","values","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46ac9927.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"board_game__133qm\",\"board\":\"board_board__5xYAb\",\"lines\":\"board_lines__K2aWm\",\"blockLine\":\"board_blockLine__2Shsx\",\"next\":\"board_next__zhgk4\",\"square\":\"board_square__19hXC\",\"none\":\"board_none__25BgY\",\"I\":\"board_I__v5VWo\",\"J\":\"board_J__333YF\",\"L\":\"board_L__3tq8V\",\"O\":\"board_O__1CzkM\",\"S\":\"board_S__2T1KA\",\"T\":\"board_T__-Esw_\",\"Z\":\"board_Z__2VCFE\",\"internSquare\":\"board_internSquare__3Bn7h\",\"commands\":\"board_commands__2BLja\",\"descriptions\":\"board_descriptions__1dhGE\",\"instructions\":\"board_instructions__E5mVe\",\"scores\":\"board_scores__2Bjqx\",\"values\":\"board_values__1lHjc\"};","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback: () => void, delay: number) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => cb.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [cb, delay]);\n}\n","import { useState, useCallback } from \"react\";\n\n/**\n * original gameboy drop rates\n * @see https://tetris.fandom.com/wiki/Tetris_(Game_Boy)\n */\nconst rates = [\n  Math.floor((1000 * 53) / 60), //level 8\n  Math.floor((1000 * 49) / 60), //level 1\n  Math.floor((1000 * 45) / 60), //level 2\n  Math.floor((1000 * 41) / 60), //level 3\n  Math.floor((1000 * 37) / 60), //level 4\n  Math.floor((1000 * 33) / 60), //level 5\n  Math.floor((1000 * 28) / 60), //level 6\n  Math.floor((1000 * 22) / 60), //level 7\n  Math.floor((1000 * 17) / 60), //level 8\n  Math.floor((1000 * 11) / 60), //level 9\n  Math.floor((1000 * 10) / 60), //level 10\n  Math.floor((1000 * 9) / 60), //level 11\n  Math.floor((1000 * 8) / 60), //level 12\n  Math.floor((1000 * 7) / 60), //level 13\n  Math.floor((1000 * 6) / 60), //level 14\n  Math.floor((1000 * 6) / 60), //level 15\n  Math.floor((1000 * 5) / 60), //level 16\n  Math.floor((1000 * 5) / 60), //level 17\n  Math.floor((1000 * 4) / 60), //level 18\n  Math.floor((1000 * 4) / 60), //level 19\n  Math.floor((1000 * 3) / 60), //level 20\n  Math.floor((1000 * 2) / 60), //level 21\n  Math.floor((1000 * 1) / 60), //level 22\n];\nconst points = [0, 40, 100, 300, 1200];\n\nexport function useScore() {\n  const [lines, setLines] = useState(0);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(0);\n  const [rate, setRate] = useState(rates[0]);\n\n  const updateScore = useCallback(\n    (n: number) => {\n      const nlines = lines + n;\n      const nlevel = Math.floor(nlines / 10);\n      const nrate = rates[nlevel];\n      setLines(nlines);\n      setLevel(nlevel);\n      setRate(nrate);\n      setScore((prev) => prev + (nlevel + 1) * points[n]);\n    },\n    [lines]\n  );\n\n  return { lines, score, level, rate, updateScore };\n}\n","import { useState, useCallback, useEffect } from \"react\";\nimport { useInterval } from \"./interval\";\nimport { useScore } from \"./score\";\n\nconst tetrominos = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"] as const;\n\n/**\n * We are using modern SRS rotation system\n * @See https://tetris.fandom.com/wiki/SRS\n */\nconst shapes = {\n  I: [\n    [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 0, 1],\n      [0, 0, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n    ],\n    [\n      [0, 1],\n      [0, 1],\n      [0, 1],\n      [0, 1],\n    ],\n  ],\n  J: [\n    [\n      [2, 0, 0],\n      [2, 2, 2],\n    ],\n    [\n      [0, 2, 2],\n      [0, 2, 0],\n      [0, 2, 0],\n    ],\n    [\n      [0, 0, 0],\n      [2, 2, 2],\n      [0, 0, 2],\n    ],\n    [\n      [0, 2],\n      [0, 2],\n      [2, 2],\n    ],\n  ],\n  L: [\n    [\n      [0, 0, 3],\n      [3, 3, 3],\n    ],\n    [\n      [0, 3, 0],\n      [0, 3, 0],\n      [0, 3, 3],\n    ],\n    [\n      [0, 0, 0],\n      [3, 3, 3],\n      [3, 0, 0],\n    ],\n    [\n      [3, 3],\n      [0, 3],\n      [0, 3],\n    ],\n  ],\n  O: [\n    [\n      [0, 4, 4],\n      [0, 4, 4],\n    ],\n  ],\n  S: [\n    [\n      [0, 5, 5],\n      [5, 5, 0],\n    ],\n    [\n      [0, 5, 0],\n      [0, 5, 5],\n      [0, 0, 5],\n    ],\n    [\n      [0, 0, 0],\n      [0, 5, 5],\n      [5, 5, 0],\n    ],\n    [\n      [5, 0],\n      [5, 5],\n      [0, 5],\n    ],\n  ],\n  T: [\n    [\n      [0, 6, 0],\n      [6, 6, 6],\n    ],\n    [\n      [0, 6, 0],\n      [0, 6, 6],\n      [0, 6, 0],\n    ],\n    [\n      [0, 0, 0],\n      [6, 6, 6],\n      [0, 6, 0],\n    ],\n    [\n      [0, 6],\n      [6, 6],\n      [0, 6],\n    ],\n  ],\n  Z: [\n    [\n      [7, 7, 0],\n      [0, 7, 7],\n    ],\n    [\n      [0, 0, 7],\n      [0, 7, 7],\n      [0, 7, 0],\n    ],\n    [\n      [0, 0, 0],\n      [7, 7, 0],\n      [0, 7, 7],\n    ],\n    [\n      [0, 7],\n      [7, 7],\n      [7, 0],\n    ],\n  ],\n};\n\nconst positions = {\n  I: { x: 3, y: -2 },\n  J: { x: 4, y: -2 },\n  L: { x: 4, y: -2 },\n  O: { x: 3, y: -2 },\n  S: { x: 4, y: -2 },\n  T: { x: 4, y: -2 },\n  Z: { x: 4, y: -2 },\n};\nexport type Tetromino = typeof tetrominos[number];\n\nexport enum TetrisState {\n  running,\n  paused,\n  gameover,\n}\n\nfunction getInitBoard(width: number, height: number) {\n  return new Array<Array<number>>(height)\n    .fill(new Array<number>(width))\n    .map((line) => line.fill(0));\n}\n\nfunction getRandomTetromino() {\n  return tetrominos[Math.floor(Math.random() * Math.floor(tetrominos.length))];\n}\n\n/**\n * get the shape of the given tetromino\n * @param t a tetromino\n */\nexport function getTetrominoShape(t: Tetromino, rotation = 0) {\n  return shapes[t][rotation];\n}\n\n/**\n * check if a given point from the board is in a given shape\n * @param shape the shape to check a position against\n * @param posX horizontal position of the shape in the board\n * @param posY vertical position of the shape in the board\n * @param x horizontal position in the board to check\n * @param y vertical position in the board to check\n */\nexport function isInShape(\n  shape: number[][],\n  posX: number,\n  posY: number,\n  x: number,\n  y: number\n) {\n  return x >= posX &&\n    x < posX + shape[0].length &&\n    y >= posY &&\n    y < posY + shape.length\n    ? shape[y - posY][x - posX]\n    : 0;\n}\n\nfunction isShapeCollidingWithBoard(\n  board: number[][],\n  shape: number[][],\n  x: number,\n  y: number\n) {\n  return shape.some((line, j) =>\n    line.some(\n      (value, i) =>\n        value > 0 &&\n        y + j >= 0 &&\n        (board[y + j] === undefined ||\n          board[y + j][x + i] === undefined ||\n          board[y + j][x + i] > 0)\n    )\n  );\n}\n\nfunction merge(board: number[][], shape: number[][], x: number, y: number) {\n  return board.map((line, l) =>\n    line.map((value, i) => value + isInShape(shape, x, y, i, l))\n  );\n}\n\nfunction clearLines(board: number[][]) {\n  const lines = board.length;\n  const clearedBoard = board.filter((line) =>\n    line.some((value) => value === 0)\n  );\n  const cleared = lines - clearedBoard.length;\n  if (cleared > 0) {\n    clearedBoard.splice(\n      0,\n      0,\n      ...getInitBoard(board[0].length, lines - clearedBoard.length)\n    );\n    return { board: clearedBoard, cleared };\n  }\n  return { board, cleared };\n}\n\n/**\n * create a full tetris game state\n * @param width width of tetris\n * @param height height of tetris\n */\nexport const useTetris = (width = 10, height = 20) => {\n  const [state, setState] = useState(TetrisState.paused);\n  const [board, setBoard] = useState(() => getInitBoard(width, height));\n  const [currentTetromino, setCurrent] = useState(getRandomTetromino);\n  const [nextTetromino, setNext] = useState(getRandomTetromino);\n  const [posX, setX] = useState(positions[currentTetromino].x);\n  const [posY, setY] = useState(positions[currentTetromino].y);\n  const [rotation, setRotation] = useState(0);\n  const [checkY, setCheckY] = useState(-1);\n  const { lines, level, score, rate, updateScore } = useScore();\n\n  const togglePause = () =>\n    setState((prev) =>\n      prev === TetrisState.gameover\n        ? prev\n        : prev === TetrisState.paused\n        ? TetrisState.running\n        : TetrisState.paused\n    );\n  const reset = useCallback(() => {\n    setNext((prev) => {\n      setRotation(0);\n      setX(positions[prev].x);\n      setY(positions[prev].y);\n      setCurrent(prev);\n      return getRandomTetromino();\n    });\n    setBoard(getInitBoard(width, height));\n    setState(TetrisState.running);\n  }, [width, height]);\n\n  const next = useCallback(() => {\n    if (state === TetrisState.running)\n      setNext((prev) => {\n        setRotation(0);\n        setX(positions[prev].x);\n        setY(positions[prev].y);\n        setCurrent(prev);\n        return getRandomTetromino();\n      });\n  }, [state]);\n\n  const rotate = useCallback(() => {\n    if (state === TetrisState.running)\n      setRotation((prev) => {\n        const rotate = (prev + 1) % shapes[currentTetromino].length;\n        const rotatedShape = shapes[currentTetromino][rotate];\n        return isShapeCollidingWithBoard(board, rotatedShape, posX, posY)\n          ? prev\n          : rotate;\n      });\n  }, [state, board, currentTetromino, posX, posY]);\n  const left = useCallback(() => {\n    if (state === TetrisState.running)\n      setX((prev) =>\n        isShapeCollidingWithBoard(\n          board,\n          shapes[currentTetromino][rotation],\n          prev - 1,\n          posY\n        )\n          ? prev\n          : prev - 1\n      );\n  }, [state, board, currentTetromino, rotation, posY]);\n  const right = useCallback(() => {\n    if (state === TetrisState.running)\n      setX((prev) =>\n        isShapeCollidingWithBoard(\n          board,\n          shapes[currentTetromino][rotation],\n          prev + 1,\n          posY\n        )\n          ? prev\n          : prev + 1\n      );\n  }, [state, board, currentTetromino, rotation, posY]);\n  const down = useCallback(() => {\n    if (state === TetrisState.running) {\n      setCheckY(posY + 1);\n    }\n  }, [state, posY]);\n\n  useEffect(() => {\n    if (checkY === posY + 1) {\n      if (\n        isShapeCollidingWithBoard(\n          board,\n          shapes[currentTetromino][rotation],\n          posX,\n          checkY\n        )\n      ) {\n        const { board: saveboard, cleared } = clearLines(\n          merge(board, shapes[currentTetromino][rotation], posX, posY)\n        );\n        if (saveboard[0].some((value) => value > 0))\n          setState(TetrisState.gameover);\n        else {\n          setBoard(saveboard);\n          if (cleared) updateScore(cleared);\n          next();\n        }\n      } else setY(checkY);\n    }\n  }, [\n    board,\n    currentTetromino,\n    rotation,\n    posX,\n    posY,\n    checkY,\n    next,\n    updateScore,\n  ]);\n\n  useInterval(() => {\n    if (state === TetrisState.running) down();\n  }, rate);\n\n  return {\n    lines,\n    level,\n    score,\n    state,\n    board,\n    currentTetromino,\n    nextTetromino,\n    posX,\n    posY,\n    rotation,\n    next,\n    rotate,\n    left,\n    right,\n    down,\n    togglePause,\n    reset,\n  };\n};\n","export const cn = (...names: string[]) => names.join(\" \");\n","export const range = (start: number, end: number, length = end - start + 1) =>\n  Array.from({ length }, (_, i) => start + i);\n","import React, { useMemo } from \"react\";\nimport {\n  useTetris,\n  getTetrominoShape,\n  isInShape,\n  TetrisState,\n} from \"../hooks/tetrominos\";\nimport { useKeyBoard } from \"../hooks/keyboard\";\nimport { cn, range } from \"../utils\";\nimport style from \"./board.module.css\";\n\ntype BoardProps = {\n  width: number;\n  height: number;\n};\n\nconst TetrominoStyles = [\"none\", \"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"] as const;\n\nfunction Square({ value }: { value: number }) {\n  return (\n    <div className={cn(style.square, style[TetrominoStyles[value]])}>\n      <div className={cn(style.internSquare, style[TetrominoStyles[value]])} />\n    </div>\n  );\n}\n\nconst Cell = React.memo(Square);\n\nexport function Board(props: BoardProps) {\n  const {\n    state,\n    board,\n    lines,\n    level,\n    score,\n    currentTetromino,\n    nextTetromino,\n    posX,\n    posY,\n    rotation,\n    rotate,\n    down,\n    left,\n    right,\n    next,\n    togglePause,\n    reset,\n  } = useTetris(props.width, props.height);\n\n  const nextShape = useMemo(() => getTetrominoShape(nextTetromino), [\n    nextTetromino,\n  ]);\n  const currentShape = useMemo(\n    () => getTetrominoShape(currentTetromino, rotation),\n    [currentTetromino, rotation]\n  );\n\n  useKeyBoard(\n    (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n          rotate();\n          break;\n        case \"ArrowDown\":\n          down();\n          break;\n        case \"ArrowLeft\":\n          left();\n          break;\n        case \"ArrowRight\":\n          right();\n          break;\n        case \"Space\":\n          next();\n          break;\n        case \"Escape\":\n          togglePause();\n          break;\n        case \"Enter\":\n          reset();\n          break;\n      }\n      event.preventDefault();\n    },\n    [\n      \"ArrowUp\",\n      \"ArrowDown\",\n      \"ArrowLeft\",\n      \"ArrowRight\",\n      \"Space\",\n      \"Escape\",\n      \"Enter\",\n    ]\n  );\n\n  return (\n    <div className={cn(style.board)}>\n      <div className={style.commands}>\n        <div className={style.descriptions}>\n          <div>&uarr;</div>\n          <div>&larr;&darr;&rarr;</div>\n          <div>escape</div>\n          <div>enter</div>\n          <div>space</div>\n        </div>\n        <div className={style.instructions}>\n          <div> Rotate</div>\n          <div> Move</div>\n          <div> Play/Pause game</div>\n          <div> Restart game</div>\n          <div> Cheat</div>\n        </div>\n      </div>\n      <div className={style.game}>\n        {state === TetrisState.paused\n          ? \"Paused\"\n          : state === TetrisState.gameover\n          ? \"Game Over\"\n          : \"Playing\"}\n\n        <div className={cn(style.lines)}>\n          {board.map((line, l) => (\n            <div key={l} className={cn(style.blockLine)}>\n              {line.map((value, i) => {\n                const color =\n                  state === TetrisState.gameover\n                    ? 1\n                    : value || isInShape(currentShape, posX, posY, i, l);\n                return <Cell value={color} key={`Cell-${i}${l}${color}`} />;\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className={cn(style.next)}>\n        <div className={style.scores}>\n          <div className={style.descriptions}>\n            <div>Lines:</div>\n            <div>Level:</div>\n            <div>Score:</div>\n          </div>\n          <div className={style.values}>\n            <div>{lines}</div>\n            <div>{level}</div>\n            <div>{score}</div>\n          </div>\n        </div>\n        Next Block\n        <div className={cn(style.lines)}>\n          {range(1, 4).map((y) => (\n            <div key={y} className={cn(style.blockLine)}>\n              {range(1, 6).map((x) => {\n                const color = isInShape(nextShape, 2, 2, x, y);\n                return <Cell key={x} value={color} />;\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function useKeyBoard(\n  callback: (event: KeyboardEvent) => void,\n  codes: string[],\n  options: {\n    keyup?: boolean;\n    keydown?: boolean;\n  } = { keydown: true, keyup: false }\n) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const downHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    const upHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    if (options.keydown) window.addEventListener(\"keydown\", downHandler);\n    if (options.keyup) window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [cb, codes, options.keyup, options.keydown]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Board } from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board width={10} height={20} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}