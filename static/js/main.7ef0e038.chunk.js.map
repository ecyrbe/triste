{"version":3,"sources":["components/board.module.css","hooks/tetrominos.ts","utils/classnames.ts","utils/range.ts","components/board.tsx","hooks/keyboard.ts","hooks/interval.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","tetrominos","shapes","I","J","L","O","S","T","Z","positions","x","y","getInitBoard","width","height","Array","fill","map","line","getRandomTetromino","Math","floor","random","length","isInShape","shape","posX","posY","isShapeCollidingWithBoard","board","some","j","value","i","mergeBoard","prev","lines","cur","l","filter","splice","cn","names","join","range","start","end","from","_","Cell","React","memo","active","className","style","square","inactive","internSquare","Board","props","useState","setBoard","currentTetromino","setCurrent","nextTetromino","setNext","setX","setY","setShape","isInCurrentShape","useCallback","next","rotate","nextShape","zip","reverse","left","right","down","prevBoard","useTetris","useMemo","callback","codes","options","keydown","keyup","cb","useRef","useEffect","current","downHandler","event","includes","code","upHandler","window","addEventListener","removeEventListener","useKeyBoard","preventDefault","delay","id","setInterval","clearInterval","useInterval","key","blockLine","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ef0e038.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"board_board__5xYAb\",\"lines\":\"board_lines__K2aWm\",\"blockLine\":\"board_blockLine__2Shsx\",\"next\":\"board_next__zhgk4\",\"square\":\"board_square__19hXC\",\"active\":\"board_active__q1ayM\",\"inactive\":\"board_inactive__zhFB5\",\"internSquare\":\"board_internSquare__3Bn7h\"};","import { useState, useCallback } from \"react\";\nimport zip from \"lodash.zip\";\n\nconst tetrominos = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"] as const;\n\nconst shapes = {\n  I: [[1, 1, 1, 1]],\n  J: [\n    [1, 0, 0],\n    [1, 1, 1],\n  ],\n  L: [\n    [0, 0, 1],\n    [1, 1, 1],\n  ],\n  O: [\n    [1, 1],\n    [1, 1],\n  ],\n  S: [\n    [0, 1, 1],\n    [1, 1, 0],\n  ],\n  T: [\n    [0, 1, 0],\n    [1, 1, 1],\n  ],\n  Z: [\n    [1, 1, 0],\n    [0, 1, 1],\n  ],\n};\n\nconst positions = {\n  I: { x: 3, y: -1 },\n  J: { x: 3, y: -1 },\n  L: { x: 3, y: -1 },\n  O: { x: 4, y: -1 },\n  S: { x: 3, y: -1 },\n  T: { x: 3, y: -1 },\n  Z: { x: 3, y: -1 },\n};\nexport type Tetromino = typeof tetrominos[number];\n\nfunction getInitBoard(width: number, height: number) {\n  return new Array<Array<number>>(height)\n    .fill(new Array<number>(width))\n    .map((line) => line.fill(0));\n}\n\nfunction getRandomTetromino() {\n  return tetrominos[Math.floor(Math.random() * Math.floor(tetrominos.length))];\n}\n\n/**\n * get the shape of the given tetromino\n * @param t a tetromino\n */\nexport function getTetrominoShape(t: Tetromino) {\n  return shapes[t];\n}\n\n/**\n * check if a given point from the board is in a given shape\n * @param shape the shape to check a position against\n * @param posX horizontal position of the shape in the board\n * @param posY vertical position of the shape in the board\n * @param x horizontal position in the board to check\n * @param y vertical position in the board to check\n */\nexport function isInShape(\n  shape: number[][],\n  posX: number,\n  posY: number,\n  x: number,\n  y: number\n) {\n  return (\n    x >= posX &&\n    x < posX + shape[0].length &&\n    y >= posY &&\n    y < posY + shape.length &&\n    shape[y - posY][x - posX] > 0\n  );\n}\n\nfunction isShapeCollidingWithBoard(\n  board: number[][],\n  shape: number[][],\n  x: number,\n  y: number\n) {\n  return (\n    x < 0 ||\n    shape.some(\n      (line, j) =>\n        y + j >= board.length ||\n        line.some((value, i) =>\n          x + i < board[0].length\n            ? y + j >= 0\n              ? board[y + j][x + i] + value > 1\n              : false\n            : true\n        )\n    )\n  );\n}\n\nfunction mergeBoard(prev: number[][], shape: number[][], x: number, y: number) {\n  const lines = prev.length;\n  const cur = prev\n    .map((line, l) =>\n      line.map((value, i) => (isInShape(shape, x, y, i, l) ? value + 1 : value))\n    )\n    .filter((line) => line.some((value) => value === 0));\n  cur.splice(0, 0, ...getInitBoard(prev[0].length, lines - cur.length));\n  return cur;\n}\n\n/**\n * create a full tetris game state\n * @param width width of tetris\n * @param height height of tetris\n */\nexport const useTetris = (width = 10, height = 20) => {\n  const [board, setBoard] = useState(() => getInitBoard(width, height));\n  const [currentTetromino, setCurrent] = useState(getRandomTetromino);\n  const [nextTetromino, setNext] = useState(getRandomTetromino);\n  const [posX, setX] = useState(positions[currentTetromino].x);\n  const [posY, setY] = useState(positions[currentTetromino].y);\n  const [shape, setShape] = useState<number[][]>(shapes[currentTetromino]);\n\n  const isInCurrentShape = useCallback(\n    (x: number, y: number) => isInShape(shape, posX, posY, x, y),\n    [posX, posY, shape]\n  );\n  const next = useCallback(() => {\n    setShape(shapes[nextTetromino]);\n    setX(positions[nextTetromino].x);\n    setY(positions[nextTetromino].y);\n    setCurrent(nextTetromino);\n    setNext(getRandomTetromino());\n  }, [nextTetromino]);\n\n  const rotate = useCallback(() => {\n    const nextShape = zip(...shape).reverse() as number[][];\n    if (!isShapeCollidingWithBoard(board, nextShape, posX, posY))\n      setShape(nextShape);\n  }, [board, shape, posX, posY]);\n  const left = useCallback(\n    () =>\n      setX((prev) =>\n        isShapeCollidingWithBoard(board, shape, prev - 1, posY)\n          ? prev\n          : prev - 1\n      ),\n    [board, shape, posY]\n  );\n  const right = useCallback(\n    () =>\n      setX((prev) =>\n        isShapeCollidingWithBoard(board, shape, prev + 1, posY)\n          ? prev\n          : prev + 1\n      ),\n    [board, shape, posY]\n  );\n  const down = useCallback(\n    () =>\n      setY((prev) => {\n        if (isShapeCollidingWithBoard(board, shape, posX, prev + 1)) {\n          setBoard((prevBoard) => mergeBoard(prevBoard, shape, posX, prev));\n          next();\n          return prev;\n        } else return prev + 1;\n      }),\n    [board, shape, posX, next]\n  );\n  return {\n    board,\n    currentTetromino,\n    nextTetromino,\n    isInCurrentShape,\n    next,\n    rotate,\n    left,\n    right,\n    down,\n  };\n};\n","export const cn = (...names: string[]) => names.join(\" \");\n","export const range = (start: number, end: number, length = end - start + 1) =>\n  Array.from({ length }, (_, i) => start + i);\n","import React, { useMemo } from \"react\";\nimport { useTetris, getTetrominoShape, isInShape } from \"../hooks/tetrominos\";\nimport { useInterval } from \"../hooks/interval\";\nimport { useKeyBoard } from \"../hooks/keyboard\";\nimport { cn, range } from \"../utils\";\n\nimport style from \"./board.module.css\";\n\ntype BoardProps = {\n  width: number;\n  height: number;\n};\n\nfunction Square({ active }: { active: boolean }) {\n  return (\n    <div className={cn(style.square, active ? style.active : style.inactive)}>\n      <div\n        className={cn(\n          style.internSquare,\n          active ? style.active : style.inactive\n        )}\n      />\n    </div>\n  );\n}\n\nconst Cell = React.memo(Square);\n\nexport function Board(props: BoardProps) {\n  const {\n    board,\n    nextTetromino,\n    isInCurrentShape,\n    rotate,\n    down,\n    left,\n    right,\n    next,\n  } = useTetris(props.width, props.height);\n\n  const nextShape = useMemo(() => getTetrominoShape(nextTetromino), [\n    nextTetromino,\n  ]);\n\n  useKeyBoard(\n    (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n          rotate();\n          break;\n        case \"ArrowDown\":\n          down();\n          break;\n        case \"ArrowLeft\":\n          left();\n          break;\n        case \"ArrowRight\":\n          right();\n          break;\n        case \"Space\":\n          next();\n          break;\n      }\n      event.preventDefault();\n    },\n    [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Space\"]\n  );\n  useInterval(down, 1000);\n\n  return (\n    <div className={cn(style.board)}>\n      <div className={cn(style.lines)}>\n        {board.map((line, l) => (\n          <div key={l} className={cn(style.blockLine)}>\n            {line.map((value, i) => (\n              <Cell active={value > 0 || isInCurrentShape(i, l)} />\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className={cn(style.next)}>\n        Next Block\n        <div className={cn(style.lines)}>\n          {range(1, 4).map((y) => (\n            <div key={y} className={cn(style.blockLine)}>\n              {range(1, 6).map((x) => (\n                <Cell active={isInShape(nextShape, 2, 2, x, y)} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function useKeyBoard(\n  callback: (event: KeyboardEvent) => void,\n  codes: string[],\n  options: {\n    keyup?: boolean;\n    keydown?: boolean;\n  } = { keydown: true, keyup: false }\n) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const downHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    const upHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    if (options.keydown) window.addEventListener(\"keydown\", downHandler);\n    if (options.keyup) window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [cb, codes, options.keyup, options.keydown]);\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback: () => void, delay: number) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => cb.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [cb, delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Board } from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board width={10} height={20} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}