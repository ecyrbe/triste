{"version":3,"sources":["components/board.module.css","utils/tetrominoes.ts","utils/classnames.ts","utils/range.ts","data/tetrominoes.ts","utils/board.ts","components/cell.tsx","hooks/interval.ts","hooks/stats.ts","hooks/tetris.ts","hooks/highscores.ts","components/stats.tsx","components/next.tsx","components/help.tsx","components/highscores.tsx","components/board.tsx","hooks/keyboard.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TetrominoRotation","cn","names","join","range","start","end","length","Array","from","_","i","tetrominoes","shapes","I","J","L","O","S","T","Z","positions","x","y","getRandomTetromino","Math","floor","random","getTetrominoShape","tetromino","rotation","Up","getInitBoard","width","height","fill","map","line","isInShape","shape","posX","posY","isShapeCollidingWithBoard","board","some","j","value","undefined","merge","l","clearLines","lines","clearedBoard","filter","cleared","splice","TetrominoStyles","Cell","React","memo","className","style","square","internSquare","useInterval","callback","delay","cb","useRef","useEffect","current","id","setInterval","clearInterval","rates","points","useScore","useState","setLines","score","setScore","level","setLevel","rate","setRate","updateScore","useCallback","n","nlines","nlevel","nrate","nscore","resetScore","TetrisState","useHighscores","maxStore","scores","localStorage","getItem","JSON","parse","date","highscores","setHighscores","addHighscore","prev","orderBy","Date","toLocaleDateString","slice","setItem","stringify","Stats","descriptions","border","values","Next","computeColor","key","blockLine","Help","help","instructions","Highscores","highscore","normal","Board","props","paused","state","setState","setBoard","currentTetromino","setCurrent","nextTetromino","setNext","setX","setY","setRotation","checkY","setCheckY","togglePause","gameover","running","reset","next","rotate","rotatedShape","left","right","down","saveboard","useTetris","nextShape","useMemo","currentShape","computeNextColor","codes","options","keydown","keyup","downHandler","event","includes","code","upHandler","window","addEventListener","removeEventListener","useKeyBoard","preventDefault","game","over","color","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8d6ab9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"board_game__133qm\",\"over\":\"board_over__ZBIGv\",\"animate-game-over\":\"board_animate-game-over__35jMU\",\"paused\":\"board_paused__22pYZ\",\"animate-paused\":\"board_animate-paused__23Z1H\",\"running\":\"board_running__3HKDn\",\"animate-running\":\"board_animate-running__kh52d\",\"board\":\"board_board__5xYAb\",\"border\":\"board_border__3Hrc3\",\"lines\":\"board_lines__K2aWm\",\"blockLine\":\"board_blockLine__2Shsx\",\"next\":\"board_next__zhgk4\",\"square\":\"board_square__19hXC\",\"help\":\"board_help__3El-x\",\"descriptions\":\"board_descriptions__1dhGE\",\"instructions\":\"board_instructions__E5mVe\",\"scores\":\"board_scores__2Bjqx\",\"score\":\"board_score__GF9Zs\",\"values\":\"board_values__1lHjc\",\"highscores\":\"board_highscores__l_5RI\",\"highscore\":\"board_highscore__Jg8Q7\",\"normal\":\"board_normal__1mFcu\",\"none\":\"board_none__25BgY\",\"I\":\"board_I__v5VWo\",\"J\":\"board_J__333YF\",\"L\":\"board_L__3tq8V\",\"O\":\"board_O__1CzkM\",\"S\":\"board_S__2T1KA\",\"T\":\"board_T__-Esw_\",\"Z\":\"board_Z__2VCFE\",\"internSquare\":\"board_internSquare__3Bn7h\"};","import { Tetromino, tetrominoes, shapes } from \"../data/tetrominoes\";\n\nexport enum TetrominoRotation {\n  Up,\n  Right,\n  Down,\n  Left,\n}\n\n/**\n * return a random tetromino\n */\nexport function getRandomTetromino() {\n  return tetrominoes[\n    Math.floor(Math.random() * Math.floor(tetrominoes.length))\n  ];\n}\n\n/**\n * get the shape of the given tetromino\n * @param tetromino a tetromino\n * @param rotation rotation step, default to 0 (0 to 3)\n */\nexport function getTetrominoShape(\n  tetromino: Tetromino,\n  rotation = TetrominoRotation.Up\n) {\n  return shapes[tetromino][rotation];\n}\n","export const cn = (...names: string[]) => names.join(\" \");\n","export const range = (start: number, end: number, length = end - start + 1) =>\n  Array.from({ length }, (_, i) => start + i);\n","export const tetrominoes = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"] as const;\n\n/**\n * We are using modern SRS rotation system\n * @See https://tetris.fandom.com/wiki/SRS\n */\nexport const shapes = {\n  I: [\n    [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 0, 1],\n      [0, 0, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n    ],\n    [\n      [0, 1],\n      [0, 1],\n      [0, 1],\n      [0, 1],\n    ],\n  ],\n  J: [\n    [\n      [2, 0, 0],\n      [2, 2, 2],\n    ],\n    [\n      [0, 2, 2],\n      [0, 2, 0],\n      [0, 2, 0],\n    ],\n    [\n      [0, 0, 0],\n      [2, 2, 2],\n      [0, 0, 2],\n    ],\n    [\n      [0, 2],\n      [0, 2],\n      [2, 2],\n    ],\n  ],\n  L: [\n    [\n      [0, 0, 3],\n      [3, 3, 3],\n    ],\n    [\n      [0, 3, 0],\n      [0, 3, 0],\n      [0, 3, 3],\n    ],\n    [\n      [0, 0, 0],\n      [3, 3, 3],\n      [3, 0, 0],\n    ],\n    [\n      [3, 3],\n      [0, 3],\n      [0, 3],\n    ],\n  ],\n  O: [\n    [\n      [0, 4, 4],\n      [0, 4, 4],\n    ],\n    [\n      [0, 4, 4],\n      [0, 4, 4],\n    ],\n    [\n      [0, 4, 4],\n      [0, 4, 4],\n    ],\n    [\n      [0, 4, 4],\n      [0, 4, 4],\n    ],\n  ],\n  S: [\n    [\n      [0, 5, 5],\n      [5, 5, 0],\n    ],\n    [\n      [0, 5, 0],\n      [0, 5, 5],\n      [0, 0, 5],\n    ],\n    [\n      [0, 0, 0],\n      [0, 5, 5],\n      [5, 5, 0],\n    ],\n    [\n      [5, 0],\n      [5, 5],\n      [0, 5],\n    ],\n  ],\n  T: [\n    [\n      [0, 6, 0],\n      [6, 6, 6],\n    ],\n    [\n      [0, 6, 0],\n      [0, 6, 6],\n      [0, 6, 0],\n    ],\n    [\n      [0, 0, 0],\n      [6, 6, 6],\n      [0, 6, 0],\n    ],\n    [\n      [0, 6],\n      [6, 6],\n      [0, 6],\n    ],\n  ],\n  Z: [\n    [\n      [7, 7, 0],\n      [0, 7, 7],\n    ],\n    [\n      [0, 0, 7],\n      [0, 7, 7],\n      [0, 7, 0],\n    ],\n    [\n      [0, 0, 0],\n      [7, 7, 0],\n      [0, 7, 7],\n    ],\n    [\n      [0, 7],\n      [7, 7],\n      [7, 0],\n    ],\n  ],\n};\n\nexport const positions = {\n  I: { x: 3, y: -2 },\n  J: { x: 3, y: -2 },\n  L: { x: 3, y: -2 },\n  O: { x: 3, y: -2 },\n  S: { x: 3, y: -2 },\n  T: { x: 3, y: -2 },\n  Z: { x: 3, y: -2 },\n};\nexport type Tetromino = typeof tetrominoes[number];\n","/**\n * initialize an empty tetris board\n * @param width width of the board\n * @param height height of the board\n */\nexport function getInitBoard(width: number, height: number) {\n  return new Array<Array<number>>(height)\n    .fill(new Array<number>(width))\n    .map((line) => line.fill(0));\n}\n\n/**\n * check if a given point from the board is in a given shape\n * @param shape the shape to check a position against\n * @param posX horizontal position of the shape in the board\n * @param posY vertical position of the shape in the board\n * @param x horizontal position in the board to check\n * @param y vertical position in the board to check\n */\nexport function isInShape(\n  shape: number[][],\n  posX: number,\n  posY: number,\n  x: number,\n  y: number\n) {\n  return x >= posX &&\n    x < posX + shape[0].length &&\n    y >= posY &&\n    y < posY + shape.length\n    ? shape[y - posY][x - posX]\n    : 0;\n}\n\n/**\n * Check if given shape is colliding with the board\n * @param board board to check collision against\n * @param shape shape of any tetromino\n * @param x horizontal position of the tetromino in the board\n * @param y vertical position of the tetromino in the board\n */\nexport function isShapeCollidingWithBoard(\n  board: number[][],\n  shape: number[][],\n  x: number,\n  y: number\n) {\n  return shape.some((line, j) =>\n    line.some(\n      (value, i) =>\n        value > 0 &&\n        y + j >= 0 &&\n        (board[y + j] === undefined ||\n          board[y + j][x + i] === undefined ||\n          board[y + j][x + i] > 0)\n    )\n  );\n}\n\n/**\n * Merge a shape into a board (immutable)\n * @param board board to merge against\n * @param shape shape to merge\n * @param x horizontal position of the tetromino in the board\n * @param y vertical position of the tetromino in the board\n * @return a new board with merged tetromino\n */\nexport function merge(\n  board: number[][],\n  shape: number[][],\n  x: number,\n  y: number\n) {\n  return board.map((line, l) =>\n    line.map((value, i) => value + isInShape(shape, x, y, i, l))\n  );\n}\n/**\n * Clear all completed lines in the board (immutable)\n * @param board board to clean\n * @return a new board with the number of lines cleared\n */\nexport function clearLines(board: number[][]) {\n  const lines = board.length;\n  const clearedBoard = board.filter((line) =>\n    line.some((value) => value === 0)\n  );\n  const cleared = lines - clearedBoard.length;\n  if (cleared > 0) {\n    clearedBoard.splice(\n      0,\n      0,\n      ...getInitBoard(board[0].length, lines - clearedBoard.length)\n    );\n    return { board: clearedBoard, cleared };\n  }\n  return { board, cleared };\n}\n","import React from \"react\";\nimport style from \"./board.module.css\";\nimport { cn } from \"../utils\";\n\nconst TetrominoStyles = [\"none\", \"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"] as const;\n\nfunction Square({ value }: { value: number }) {\n  return (\n    <div className={cn(style.square, style[TetrominoStyles[value]])}>\n      <div className={cn(style.internSquare, style[TetrominoStyles[value]])} />\n    </div>\n  );\n}\n\nexport const Cell = React.memo(Square);\n","import { useEffect, useRef } from \"react\";\n\n/**\n * hook for setInterval\n * @param callback callback to be called when delay is expired\n * @param delay dynamic (can change at runtime) delay in ms\n */\nexport function useInterval(callback: () => void, delay: number) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => cb.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [cb, delay]);\n}\n","import { useState, useCallback } from \"react\";\n\n/**\n * original gameboy drop rates\n * @see https://tetris.fandom.com/wiki/Tetris_(Game_Boy)\n */\nconst rates = [\n  Math.floor((1000 * 53) / 60), //level 8\n  Math.floor((1000 * 49) / 60), //level 1\n  Math.floor((1000 * 45) / 60), //level 2\n  Math.floor((1000 * 41) / 60), //level 3\n  Math.floor((1000 * 37) / 60), //level 4\n  Math.floor((1000 * 33) / 60), //level 5\n  Math.floor((1000 * 28) / 60), //level 6\n  Math.floor((1000 * 22) / 60), //level 7\n  Math.floor((1000 * 17) / 60), //level 8\n  Math.floor((1000 * 11) / 60), //level 9\n  Math.floor((1000 * 10) / 60), //level 10\n  Math.floor((1000 * 9) / 60), //level 11\n  Math.floor((1000 * 8) / 60), //level 12\n  Math.floor((1000 * 7) / 60), //level 13\n  Math.floor((1000 * 6) / 60), //level 14\n  Math.floor((1000 * 6) / 60), //level 15\n  Math.floor((1000 * 5) / 60), //level 16\n  Math.floor((1000 * 5) / 60), //level 17\n  Math.floor((1000 * 4) / 60), //level 18\n  Math.floor((1000 * 4) / 60), //level 19\n  Math.floor((1000 * 3) / 60), //level 20\n  Math.floor((1000 * 2) / 60), //level 21\n  Math.floor((1000 * 1) / 60), //level 22\n];\nconst points = [0, 40, 100, 300, 1200];\n\n/**\n * hook to get the player current stats\n * @returns stats and callbacks to update or reset them\n */\nexport function useScore() {\n  const [lines, setLines] = useState(0);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(0);\n  const [rate, setRate] = useState(rates[0]);\n\n  const updateScore = useCallback(\n    (n: number) => {\n      const nlines = lines + n;\n      const nlevel = Math.floor(nlines / 10);\n      const nrate = rates[nlevel];\n      const nscore = score + (nlevel + 1) * points[n];\n      setLines(nlines);\n      setLevel(nlevel);\n      setRate(nrate);\n      setScore(nscore);\n    },\n    [lines, score]\n  );\n\n  const resetScore = useCallback(() => {\n    setLines(0);\n    setLevel(0);\n    setRate(rates[0]);\n    setScore(0);\n  }, []);\n\n  return { lines, score, level, rate, updateScore, resetScore };\n}\n","import { useState, useCallback, useEffect } from \"react\";\nimport { useInterval } from \"./interval\";\nimport { useScore } from \"./stats\";\nimport { positions } from \"../data/tetrominoes\";\nimport { useHighscores } from \"./highscores\";\nimport {\n  getRandomTetromino,\n  getTetrominoShape,\n  clearLines,\n  merge,\n  getInitBoard,\n  isShapeCollidingWithBoard,\n} from \"../utils\";\nimport { TetrominoRotation } from \"../utils/tetrominoes\";\n\nexport enum TetrisState {\n  running,\n  paused,\n  gameover,\n}\n\n/**\n * create a full tetris game state\n * @param width width of tetris\n * @param height height of tetris\n */\nexport const useTetris = (width = 10, height = 20) => {\n  const [state, setState] = useState(TetrisState.paused);\n  const [board, setBoard] = useState(() => getInitBoard(width, height));\n  const [currentTetromino, setCurrent] = useState(getRandomTetromino);\n  const [nextTetromino, setNext] = useState(getRandomTetromino);\n  const [posX, setX] = useState(positions[currentTetromino].x);\n  const [posY, setY] = useState(positions[currentTetromino].y);\n  const [rotation, setRotation] = useState(TetrominoRotation.Up);\n  const [checkY, setCheckY] = useState(-1);\n  const { lines, level, score, rate, updateScore, resetScore } = useScore();\n  const { highscores, addHighscore } = useHighscores();\n\n  const togglePause = () =>\n    setState((prev) =>\n      prev === TetrisState.gameover\n        ? prev\n        : prev === TetrisState.paused\n        ? TetrisState.running\n        : TetrisState.paused\n    );\n  const reset = useCallback(() => {\n    setNext((prev) => {\n      setRotation(0);\n      setX(positions[prev].x);\n      setY(positions[prev].y);\n      setCurrent(prev);\n      return getRandomTetromino();\n    });\n    resetScore();\n    setBoard(getInitBoard(width, height));\n    setState(TetrisState.running);\n  }, [width, height, resetScore]);\n\n  const next = useCallback(() => {\n    if (state === TetrisState.running)\n      setNext((prev) => {\n        setRotation(0);\n        setX(positions[prev].x);\n        setY(positions[prev].y);\n        setCurrent(prev);\n        return getRandomTetromino();\n      });\n  }, [state]);\n\n  const rotate = useCallback(() => {\n    if (state === TetrisState.running)\n      setRotation((prev) => {\n        const rotate: TetrominoRotation = (prev + 1) % 4;\n        const rotatedShape = getTetrominoShape(currentTetromino, rotate);\n        return isShapeCollidingWithBoard(board, rotatedShape, posX, posY)\n          ? prev\n          : rotate;\n      });\n  }, [state, board, currentTetromino, posX, posY]);\n  const left = useCallback(() => {\n    if (state === TetrisState.running)\n      setX((prev) =>\n        isShapeCollidingWithBoard(\n          board,\n          getTetrominoShape(currentTetromino, rotation),\n          prev - 1,\n          posY\n        )\n          ? prev\n          : prev - 1\n      );\n  }, [state, board, currentTetromino, rotation, posY]);\n  const right = useCallback(() => {\n    if (state === TetrisState.running)\n      setX((prev) =>\n        isShapeCollidingWithBoard(\n          board,\n          getTetrominoShape(currentTetromino, rotation),\n          prev + 1,\n          posY\n        )\n          ? prev\n          : prev + 1\n      );\n  }, [state, board, currentTetromino, rotation, posY]);\n  const down = useCallback(() => {\n    if (state === TetrisState.running) {\n      setCheckY(posY + 1);\n    }\n  }, [state, posY]);\n\n  useEffect(() => {\n    if (checkY === posY + 1) {\n      if (\n        isShapeCollidingWithBoard(\n          board,\n          getTetrominoShape(currentTetromino, rotation),\n          posX,\n          checkY\n        )\n      ) {\n        const { board: saveboard, cleared } = clearLines(\n          merge(\n            board,\n            getTetrominoShape(currentTetromino, rotation),\n            posX,\n            posY\n          )\n        );\n        if (saveboard[0].some((value) => value > 0)) {\n          setState(TetrisState.gameover);\n          setCheckY(0);\n        } else {\n          setBoard(saveboard);\n          if (cleared) updateScore(cleared);\n          next();\n        }\n      } else setY(checkY);\n    }\n  }, [\n    board,\n    currentTetromino,\n    rotation,\n    posX,\n    posY,\n    checkY,\n    next,\n    updateScore,\n  ]);\n\n  useEffect(() => {\n    if (state === TetrisState.gameover) {\n      addHighscore(score);\n    }\n  }, [state, score, addHighscore]);\n\n  useInterval(() => {\n    if (state === TetrisState.running) down();\n  }, rate);\n\n  return {\n    lines,\n    level,\n    score,\n    highscores,\n    state,\n    board,\n    currentTetromino,\n    nextTetromino,\n    posX,\n    posY,\n    rotation,\n    next,\n    rotate,\n    left,\n    right,\n    down,\n    togglePause,\n    reset,\n  };\n};\n","import { useState, useCallback } from \"react\";\nimport { orderBy } from \"lodash\";\n\nexport type Highscore = {\n  score: number;\n  date: string;\n};\n\nconst HIGHSCORES_KEY = \"highscores\";\n\n/**\n * hook to manage player highscores with localStorage integration\n * @param maxStore maximum number of highscores to register\n */\nexport function useHighscores(maxStore = 5) {\n  const [highscores, setHighscores] = useState(() => {\n    try {\n      const scores = localStorage.getItem(HIGHSCORES_KEY);\n      if (scores) return JSON.parse(scores) as Highscore[];\n    } catch {}\n    return new Array(maxStore).fill({ score: 0, date: \"--\" });\n  });\n  const addHighscore = useCallback(\n    (score: number) => {\n      setHighscores((prev) => {\n        let scores = orderBy(\n          [...prev, { score, date: new Date().toLocaleDateString() }],\n          [\"score\"],\n          [\"desc\"]\n        ).slice(0, maxStore);\n        localStorage.setItem(HIGHSCORES_KEY, JSON.stringify(scores));\n        return scores;\n      });\n    },\n    [maxStore]\n  );\n  return { highscores, addHighscore };\n}\n","import React from \"react\";\nimport style from \"./board.module.css\";\nimport { cn } from \"../utils\";\n\ntype StatsProps = {\n  lines: number;\n  level: number;\n  score: number;\n};\nfunction StatsImpl({ lines, level, score }: StatsProps) {\n  return (\n    <>\n      <div className={style.descriptions}>Stats</div>\n      <div className={cn(style.scores, style.border)}>\n        <div className={style.score}>\n          <div>Lines:</div>\n          <div>Level:</div>\n          <div>Score:</div>\n        </div>\n        <div className={style.values}>\n          <div>{lines}</div>\n          <div>{level}</div>\n          <div>{score}</div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport const Stats = React.memo(StatsImpl);\n","import React from \"react\";\nimport { Cell } from \"./cell\";\nimport style from \"./board.module.css\";\nimport { cn, range } from \"../utils\";\n\ntype NextProps = {\n  computeColor: (x: number, y: number) => number;\n};\n\nfunction NextImpl({ computeColor }: NextProps) {\n  return (\n    <>\n      <div className={style.descriptions}>Next</div>\n      <div className={cn(style.lines, style.border)}>\n        {range(1, 4).map((y) => (\n          <div key={y} className={cn(style.blockLine)}>\n            {range(1, 6).map((x) => {\n              return <Cell key={x} value={computeColor(x, y)} />;\n            })}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport const Next = React.memo(NextImpl);\n","import React from \"react\";\nimport style from \"./board.module.css\";\n\nfunction HelpImpl() {\n  return (\n    <div className={style.help}>\n      <div className={style.descriptions}>\n        <div>&uarr;</div>\n        <div>&larr;&darr;&rarr;</div>\n        <div>escape</div>\n        <div>enter</div>\n      </div>\n      <div className={style.instructions}>\n        <div> Rotate</div>\n        <div> Move</div>\n        <div> Play/Pause game</div>\n        <div> Restart game</div>\n      </div>\n    </div>\n  );\n}\n\nexport const Help = React.memo(HelpImpl);\n","import React from \"react\";\nimport style from \"./board.module.css\";\nimport { cn } from \"../utils\";\nimport { Highscore } from \"../hooks/highscores\";\n\ntype HighscoresProps = {\n  highscores: Highscore[];\n};\n\nfunction HighscoresImpl({ highscores }: HighscoresProps) {\n  return (\n    <>\n      <div className={style.descriptions}> Highscores</div>\n      <div className={cn(style.highscores, style.border)}>\n        {highscores.map((highscore, i) => {\n          return (\n            <div className={style.highscore} key={`SC-${i}-${highscore.score}`}>\n              <div>{i + 1}</div>\n              <div className={style.normal}>{highscore.score} </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport const Highscores = React.memo(HighscoresImpl);\n","import React, { useMemo, useCallback } from \"react\";\nimport { Cell } from \"./cell\";\nimport { useTetris, TetrisState } from \"../hooks/tetris\";\nimport { useKeyBoard } from \"../hooks/keyboard\";\nimport { cn, getTetrominoShape, isInShape } from \"../utils\";\nimport style from \"./board.module.css\";\nimport { Stats } from \"./stats\";\nimport { Next } from \"./next\";\nimport { Help } from \"./help\";\nimport { Highscores } from \"./highscores\";\n\ntype BoardProps = {\n  width: number;\n  height: number;\n};\n\nexport function Board(props: BoardProps) {\n  const {\n    state,\n    board,\n    lines,\n    level,\n    score,\n    highscores,\n    currentTetromino,\n    nextTetromino,\n    posX,\n    posY,\n    rotation,\n    rotate,\n    down,\n    left,\n    right,\n    next,\n    togglePause,\n    reset,\n  } = useTetris(props.width, props.height);\n\n  const nextShape = useMemo(() => getTetrominoShape(nextTetromino), [\n    nextTetromino,\n  ]);\n  const currentShape = useMemo(\n    () => getTetrominoShape(currentTetromino, rotation),\n    [currentTetromino, rotation]\n  );\n\n  const computeNextColor = useCallback(\n    (x: number, y: number) => isInShape(nextShape, 2, 2, x, y),\n    [nextShape]\n  );\n\n  useKeyBoard(\n    (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n          rotate();\n          break;\n        case \"ArrowDown\":\n          down();\n          break;\n        case \"ArrowLeft\":\n          left();\n          break;\n        case \"ArrowRight\":\n          right();\n          break;\n        case \"Space\":\n          next();\n          break;\n        case \"Escape\":\n          togglePause();\n          break;\n        case \"Enter\":\n          reset();\n          break;\n      }\n      event.preventDefault();\n    },\n    [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Escape\", \"Enter\"]\n  );\n\n  return (\n    <div className={cn(style.board)}>\n      <Help />\n      <div\n        className={cn(\n          style.game,\n          state === TetrisState.paused\n            ? style.paused\n            : state === TetrisState.gameover\n            ? style.over\n            : style.running\n        )}\n      >\n        {state === TetrisState.paused\n          ? \"Paused\"\n          : state === TetrisState.gameover\n          ? \"Game Over\"\n          : \"Playing\"}\n\n        <div className={cn(style.lines, style.border)}>\n          {board.map((line, l) => (\n            <div key={l} className={cn(style.blockLine)}>\n              {line.map((value, i) => {\n                const color =\n                  state === TetrisState.gameover\n                    ? 1\n                    : value || isInShape(currentShape, posX, posY, i, l);\n                return <Cell value={color} key={`Cell-${i}${l}${color}`} />;\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className={cn(style.next)}>\n        <Next computeColor={computeNextColor} />\n        <Stats lines={lines} level={level} score={score} />\n        <Highscores highscores={highscores} />\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useRef } from \"react\";\n\n/**\n * hook to listen for keyboard events and trigger a callback\n * @param callback callback to call when requested keys event are detected\n * @param codes an array of code representing the keys to listen events from\n * @param options control what events to listen (keydown by default)\n */\nexport function useKeyBoard(\n  callback: (event: KeyboardEvent) => void,\n  codes: string[],\n  options: {\n    keyup?: boolean;\n    keydown?: boolean;\n  } = { keydown: true, keyup: false }\n) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const downHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    const upHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    if (options.keydown) window.addEventListener(\"keydown\", downHandler);\n    if (options.keyup) window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [cb, codes, options.keyup, options.keydown]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Board } from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board width={10} height={20} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}