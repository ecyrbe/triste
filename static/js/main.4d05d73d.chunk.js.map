{"version":3,"sources":["components/board.module.css","hooks/interval.ts","hooks/tetrominos.ts","utils/classnames.ts","utils/range.ts","components/board.tsx","hooks/keyboard.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useInterval","callback","delay","cb","useRef","useEffect","current","id","setInterval","clearInterval","TetrisState","tetrominos","shapes","I","J","L","O","S","T","Z","positions","x","y","getInitBoard","width","height","Array","fill","map","line","getRandomTetromino","Math","floor","random","length","getTetrominoShape","t","rotation","isInShape","shape","posX","posY","isShapeCollidingWithBoard","board","some","j","value","i","undefined","merge","lines","cur","l","filter","splice","cn","names","join","range","start","end","from","_","TetrominoStyles","Cell","React","memo","className","style","square","internSquare","Board","props","useState","paused","state","setState","setBoard","currentTetromino","setCurrent","nextTetromino","setNext","setX","setY","setRotation","togglePause","prev","gameover","running","reset","useCallback","next","rotate","rotatedShape","left","right","down","saveboard","useTetris","nextShape","useMemo","currentShape","codes","options","keydown","keyup","downHandler","event","includes","code","upHandler","window","addEventListener","removeEventListener","useKeyBoard","preventDefault","commands","descriptions","instructions","game","key","blockLine","color","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d05d73d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"board_game__133qm\",\"board\":\"board_board__5xYAb\",\"lines\":\"board_lines__K2aWm\",\"blockLine\":\"board_blockLine__2Shsx\",\"next\":\"board_next__zhgk4\",\"square\":\"board_square__19hXC\",\"none\":\"board_none__25BgY\",\"I\":\"board_I__v5VWo\",\"J\":\"board_J__333YF\",\"L\":\"board_L__3tq8V\",\"O\":\"board_O__1CzkM\",\"S\":\"board_S__2T1KA\",\"T\":\"board_T__-Esw_\",\"Z\":\"board_Z__2VCFE\",\"internSquare\":\"board_internSquare__3Bn7h\",\"commands\":\"board_commands__2BLja\",\"descriptions\":\"board_descriptions__1dhGE\",\"instructions\":\"board_instructions__E5mVe\"};","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback: () => void, delay: number) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => cb.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [cb, delay]);\n}\n","import { useState, useCallback, useEffect } from \"react\";\nimport { useInterval } from \"../hooks/interval\";\n\nconst tetrominos = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"] as const;\n\nconst shapes = {\n  I: [\n    [[1, 1, 1, 1]],\n    [\n      [0, 1],\n      [0, 1],\n      [0, 1],\n      [0, 1],\n    ],\n    [[1, 1, 1, 1]],\n    [\n      [0, 0, 1],\n      [0, 0, 1],\n      [0, 0, 1],\n      [0, 0, 1],\n    ],\n  ],\n  J: [\n    [\n      [2, 0, 0],\n      [2, 2, 2],\n    ],\n    [\n      [0, 2],\n      [0, 2],\n      [2, 2],\n    ],\n    [\n      [2, 2, 2],\n      [0, 0, 2],\n    ],\n    [\n      [2, 2],\n      [2, 0],\n      [2, 0],\n    ],\n  ],\n  L: [\n    [\n      [0, 0, 3],\n      [3, 3, 3],\n    ],\n    [\n      [3, 3],\n      [0, 3],\n      [0, 3],\n    ],\n    [\n      [3, 3, 3],\n      [3, 0, 0],\n    ],\n    [\n      [3, 0],\n      [3, 0],\n      [3, 3],\n    ],\n  ],\n  O: [\n    [\n      [4, 4],\n      [4, 4],\n    ],\n  ],\n  S: [\n    [\n      [0, 5, 5],\n      [5, 5, 0],\n    ],\n    [\n      [5, 0],\n      [5, 5],\n      [0, 5],\n    ],\n  ],\n  T: [\n    [\n      [0, 6, 0],\n      [6, 6, 6],\n    ],\n    [\n      [0, 6],\n      [6, 6],\n      [0, 6],\n    ],\n    [\n      [6, 6, 6],\n      [0, 6, 0],\n    ],\n    [\n      [0, 6, 0],\n      [0, 6, 6],\n      [0, 6, 0],\n    ],\n  ],\n  Z: [\n    [\n      [7, 7, 0],\n      [0, 7, 7],\n    ],\n    [\n      [0, 7],\n      [7, 7],\n      [7, 0],\n    ],\n  ],\n};\n\nconst positions = {\n  I: { x: 3, y: -1 },\n  J: { x: 4, y: -1 },\n  L: { x: 4, y: -1 },\n  O: { x: 4, y: -1 },\n  S: { x: 4, y: -1 },\n  T: { x: 4, y: -1 },\n  Z: { x: 4, y: -1 },\n};\nexport type Tetromino = typeof tetrominos[number];\n\nexport enum TetrisState {\n  running,\n  paused,\n  gameover,\n}\n\nfunction getInitBoard(width: number, height: number) {\n  return new Array<Array<number>>(height)\n    .fill(new Array<number>(width))\n    .map((line) => line.fill(0));\n}\n\nfunction getRandomTetromino() {\n  return tetrominos[Math.floor(Math.random() * Math.floor(tetrominos.length))];\n}\n\n/**\n * get the shape of the given tetromino\n * @param t a tetromino\n */\nexport function getTetrominoShape(t: Tetromino, rotation = 0) {\n  return shapes[t][rotation];\n}\n\n/**\n * check if a given point from the board is in a given shape\n * @param shape the shape to check a position against\n * @param posX horizontal position of the shape in the board\n * @param posY vertical position of the shape in the board\n * @param x horizontal position in the board to check\n * @param y vertical position in the board to check\n */\nexport function isInShape(\n  shape: number[][],\n  posX: number,\n  posY: number,\n  x: number,\n  y: number\n) {\n  return x >= posX &&\n    x < posX + shape[0].length &&\n    y >= posY &&\n    y < posY + shape.length\n    ? shape[y - posY][x - posX]\n    : 0;\n}\n\nfunction isShapeCollidingWithBoard(\n  board: number[][],\n  shape: number[][],\n  x: number,\n  y: number\n) {\n  return shape.some((line, j) =>\n    line.some(\n      (value, i) =>\n        value > 0 &&\n        y + j >= 0 &&\n        (board[y + j] === undefined ||\n          board[y + j][x + i] === undefined ||\n          board[y + j][x + i] > 0)\n    )\n  );\n}\n\nfunction merge(board: number[][], shape: number[][], x: number, y: number) {\n  const lines = board.length;\n  const cur = board\n    .map((line, l) =>\n      line.map((value, i) => value + isInShape(shape, x, y, i, l))\n    )\n    .filter((line) => line.some((value) => value === 0));\n  cur.splice(0, 0, ...getInitBoard(board[0].length, lines - cur.length));\n  return cur;\n}\n\n/**\n * create a full tetris game state\n * @param width width of tetris\n * @param height height of tetris\n */\nexport const useTetris = (width = 10, height = 20) => {\n  const [state, setState] = useState(TetrisState.paused);\n  const [board, setBoard] = useState(() => getInitBoard(width, height));\n  const [currentTetromino, setCurrent] = useState(getRandomTetromino);\n  const [nextTetromino, setNext] = useState(getRandomTetromino);\n  const [posX, setX] = useState(positions[currentTetromino].x);\n  const [posY, setY] = useState(positions[currentTetromino].y);\n  const [rotation, setRotation] = useState(0);\n\n  const togglePause = () =>\n    setState((prev) =>\n      prev === TetrisState.gameover\n        ? prev\n        : prev === TetrisState.paused\n        ? TetrisState.running\n        : TetrisState.paused\n    );\n  const reset = useCallback(() => {\n    setNext((prev) => {\n      setRotation(0);\n      setX(positions[prev].x);\n      setY(positions[prev].y);\n      setCurrent(prev);\n      return getRandomTetromino();\n    });\n    setBoard(getInitBoard(width, height));\n    setState(TetrisState.running);\n  }, [width, height]);\n\n  const next = useCallback(() => {\n    if (state === TetrisState.running)\n      setNext((prev) => {\n        setRotation(0);\n        setX(positions[prev].x);\n        setY(positions[prev].y);\n        setCurrent(prev);\n        return getRandomTetromino();\n      });\n  }, [state]);\n\n  const rotate = useCallback(() => {\n    if (state === TetrisState.running)\n      setRotation((prev) => {\n        const rotate = (prev + 1) % shapes[currentTetromino].length;\n        const rotatedShape = shapes[currentTetromino][rotate];\n        return isShapeCollidingWithBoard(board, rotatedShape, posX, posY)\n          ? prev\n          : rotate;\n      });\n  }, [state, board, currentTetromino, posX, posY]);\n  const left = useCallback(() => {\n    if (state === TetrisState.running)\n      setX((prev) =>\n        isShapeCollidingWithBoard(\n          board,\n          shapes[currentTetromino][rotation],\n          prev - 1,\n          posY\n        )\n          ? prev\n          : prev - 1\n      );\n  }, [state, board, currentTetromino, rotation, posY]);\n  const right = useCallback(() => {\n    if (state === TetrisState.running)\n      setX((prev) =>\n        isShapeCollidingWithBoard(\n          board,\n          shapes[currentTetromino][rotation],\n          prev + 1,\n          posY\n        )\n          ? prev\n          : prev + 1\n      );\n  }, [state, board, currentTetromino, rotation, posY]);\n  const down = useCallback(() => {\n    if (state === TetrisState.running) {\n      setY((prev) =>\n        isShapeCollidingWithBoard(\n          board,\n          shapes[currentTetromino][rotation],\n          posX,\n          prev + 1\n        )\n          ? prev\n          : prev + 1\n      );\n    }\n  }, [state, board, currentTetromino, rotation, posX]);\n\n  useEffect(() => {\n    if (\n      isShapeCollidingWithBoard(\n        board,\n        shapes[currentTetromino][rotation],\n        posX,\n        posY + 1\n      )\n    ) {\n      const saveboard = merge(\n        board,\n        shapes[currentTetromino][rotation],\n        posX,\n        posY\n      );\n      if (saveboard[0].some((value) => value > 0))\n        setState(TetrisState.gameover);\n      else {\n        setBoard(saveboard);\n        next();\n      }\n    }\n  }, [board, currentTetromino, rotation, posX, posY, next]);\n\n  useInterval(() => {\n    if (state === TetrisState.running) down();\n  }, 1000);\n\n  return {\n    state,\n    board,\n    currentTetromino,\n    nextTetromino,\n    posX,\n    posY,\n    rotation,\n    next,\n    rotate,\n    left,\n    right,\n    down,\n    togglePause,\n    reset,\n  };\n};\n","export const cn = (...names: string[]) => names.join(\" \");\n","export const range = (start: number, end: number, length = end - start + 1) =>\n  Array.from({ length }, (_, i) => start + i);\n","import React, { useMemo } from \"react\";\nimport {\n  useTetris,\n  getTetrominoShape,\n  isInShape,\n  TetrisState,\n} from \"../hooks/tetrominos\";\nimport { useKeyBoard } from \"../hooks/keyboard\";\nimport { cn, range } from \"../utils\";\nimport style from \"./board.module.css\";\n\ntype BoardProps = {\n  width: number;\n  height: number;\n};\n\nconst TetrominoStyles = [\"none\", \"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"] as const;\n\nfunction Square({ value }: { value: number }) {\n  return (\n    <div className={cn(style.square, style[TetrominoStyles[value]])}>\n      <div className={cn(style.internSquare, style[TetrominoStyles[value]])} />\n    </div>\n  );\n}\n\nconst Cell = React.memo(Square);\n\nexport function Board(props: BoardProps) {\n  const {\n    state,\n    board,\n    currentTetromino,\n    nextTetromino,\n    posX,\n    posY,\n    rotation,\n    rotate,\n    down,\n    left,\n    right,\n    next,\n    togglePause,\n    reset,\n  } = useTetris(props.width, props.height);\n\n  const nextShape = useMemo(() => getTetrominoShape(nextTetromino), [\n    nextTetromino,\n  ]);\n  const currentShape = useMemo(\n    () => getTetrominoShape(currentTetromino, rotation),\n    [currentTetromino, rotation]\n  );\n\n  useKeyBoard(\n    (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n          rotate();\n          break;\n        case \"ArrowDown\":\n          down();\n          break;\n        case \"ArrowLeft\":\n          left();\n          break;\n        case \"ArrowRight\":\n          right();\n          break;\n        case \"Space\":\n          next();\n          break;\n        case \"Escape\":\n          togglePause();\n          break;\n        case \"Enter\":\n          reset();\n          break;\n      }\n      event.preventDefault();\n    },\n    [\n      \"ArrowUp\",\n      \"ArrowDown\",\n      \"ArrowLeft\",\n      \"ArrowRight\",\n      \"Space\",\n      \"Escape\",\n      \"Enter\",\n    ]\n  );\n\n  return (\n    <div className={cn(style.board)}>\n      <div className={style.commands}>\n        <div className={style.descriptions}>\n          <div>&uarr;</div>\n          <div>&larr;&darr;&rarr;</div>\n          <div>escape</div>\n          <div>enter</div>\n          <div>space</div>\n        </div>\n        <div className={style.instructions}>\n          <div> Rotate</div>\n          <div> Move</div>\n          <div> Play/Pause game</div>\n          <div> Restart game</div>\n          <div> Cheat</div>\n        </div>\n      </div>\n      <div className={style.game}>\n        {state === TetrisState.paused\n          ? \"Paused\"\n          : state === TetrisState.gameover\n          ? \"Game Over\"\n          : \"Playing\"}\n\n        <div className={cn(style.lines)}>\n          {board.map((line, l) => (\n            <div key={l} className={cn(style.blockLine)}>\n              {line.map((value, i) => {\n                const color =\n                  state === TetrisState.gameover\n                    ? 4\n                    : value || isInShape(currentShape, posX, posY, i, l);\n                return <Cell value={color} key={`Cell-${i}${l}${color}`} />;\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className={cn(style.next)}>\n        Next Block\n        <div className={cn(style.lines)}>\n          {range(1, 4).map((y) => (\n            <div key={y} className={cn(style.blockLine)}>\n              {range(1, 6).map((x) => {\n                const color = isInShape(nextShape, 2, 2, x, y);\n                return <Cell key={x} value={color} />;\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function useKeyBoard(\n  callback: (event: KeyboardEvent) => void,\n  codes: string[],\n  options: {\n    keyup?: boolean;\n    keydown?: boolean;\n  } = { keydown: true, keyup: false }\n) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const downHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    const upHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    if (options.keydown) window.addEventListener(\"keydown\", downHandler);\n    if (options.keyup) window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [cb, codes, options.keyup, options.keydown]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Board } from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board width={10} height={20} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}